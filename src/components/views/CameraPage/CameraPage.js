import React, { useRef, useState, useCallback } from 'react'import { useHistory } from 'react-router-dom'import { useDispatch } from 'react-redux'import { AiOutlineCamera, AiOutlineRetweet } from 'react-icons/ai'import Webcam from 'react-webcam'import { replaceImage } from '../../../modules/post'import './Sections/CameraPage.scss'function CameraPage() {  const dispatch = useDispatch()  const history = useHistory()  const webcamRef = useRef(null)  const [videoConstraints, setVideoConstraints] = useState({    facingMode: 'user',  })  const changeFacingMode = () => {    setVideoConstraints((prev) =>      prev.facingMode === 'user'        ? { ...videoConstraints, facingMode: 'environment' }        : { ...videoConstraints, facingMode: 'user' }    )  }  const capture = useCallback(() => {    const imageSrc = webcamRef.current.getScreenshot()    dispatch(replaceImage(imageSrc))    history.push('/addPost')  }, [webcamRef])  return (    <article className={'article_wrapper'}>      <Webcam        audio={false}        ref={webcamRef}        screenshotFormat="image/jpeg"        videoConstraints={videoConstraints}        forceScreenshotSourceSize="true"      />      <section className={'section__bar'}>        <button onClick={capture}>          <AiOutlineCamera />        </button>        <button onClick={changeFacingMode}>          <AiOutlineRetweet />        </button>      </section>      {/* <button onClick={capture}>Capture photo</button> */}      {/* {captureImg && <img src={captureImg} alt="사진" />} */}      {/* <button onClick={() => history.push('/')}>돌아가기</button> */}    </article>  )}export default CameraPage